{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { uiSliceActions } from \"./ui-slice\";\nconst initialState = {\n  items: [],\n  totalQuantity: 0\n};\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    addItemstoCart(state, action) {\n      const newItem = action.payload;\n      const itemExistsinCart = state.items.find(item => item.id === newItem.id);\n      state.totalQuantity++;\n\n      if (itemExistsinCart) {\n        itemExistsinCart.quantity++;\n        itemExistsinCart.totalPrice += newItem.price;\n      } else {\n        state.items.push({\n          id: newItem.id,\n          name: newItem.title,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price\n        });\n      }\n    },\n\n    removeItemsfromCart(state, action) {\n      const id = action.payload;\n      const itemExistsinCart = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n\n      if (itemExistsinCart.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        itemExistsinCart.quantity--;\n        itemExistsinCart.totalPrice -= itemExistsinCart.price;\n      }\n    }\n\n  }\n});\n\nconst sendCartData = cart => {\n  return async dispatch => {\n    dipatchFn(uiSliceActions.showNotification({\n      status: \"pending\",\n      title: \"Sending...\",\n      message: \"Sending cart data!\"\n    }));\n    const response = await fetch(\"https://react-http-55fae-default-rtdb.firebaseio.com/cart.json\", {\n      method: \"PUT\",\n      body: JSON.stringify(cart)\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Error sending data!\");\n    } // const data = await response.json();\n\n\n    dipatchFn(uiSliceActions.showNotification({\n      status: \"success\",\n      title: \"Successful\",\n      message: \"Succesfully Sent Data!\"\n    }));\n  };\n};\n\nexport const cartActions = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["/Users/poojapasupu/Documents/react_workspace/16-advanced-redux/src/store/cart-slice.js"],"names":["createSlice","uiSliceActions","initialState","items","totalQuantity","cartSlice","name","reducers","addItemstoCart","state","action","newItem","payload","itemExistsinCart","find","item","id","quantity","totalPrice","price","push","title","removeItemsfromCart","filter","sendCartData","cart","dispatch","dipatchFn","showNotification","status","message","response","fetch","method","body","JSON","stringify","ok","Error","cartActions","actions","reducer"],"mappings":"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","sourcesContent":["import {createSlice} from '@reduxjs/toolkit';\nimport { uiSliceActions } from \"./ui-slice\";\n\n\n\nconst initialState = {\n    items: [],\n    totalQuantity: 0\n};\n\nconst cartSlice = createSlice({\n    name:'cart',\n    initialState,\n    reducers: {\n        addItemstoCart(state, action){\n            const newItem = action.payload;\n            const itemExistsinCart = state.items.find((item)=>(item.id===newItem.id));\n            state.totalQuantity++;\n            if(itemExistsinCart){\n                itemExistsinCart.quantity++;\n                itemExistsinCart.totalPrice += newItem.price;\n            }else{\n                state.items.push({\n                    id: newItem.id,\n                    name: newItem.title,\n                    price: newItem.price,\n                    quantity: 1,\n                    totalPrice: newItem.price\n                });\n            }\n        },\n        removeItemsfromCart(state, action){\n            const id = action.payload;\n            const itemExistsinCart = state.items.find((item)=>(item.id===id));\n            state.totalQuantity--;\n            if(itemExistsinCart.quantity === 1){\n                state.items = state.items.filter((item)=>(item.id!==id));\n            }else{\n                itemExistsinCart.quantity--;\n                itemExistsinCart.totalPrice -= itemExistsinCart.price;\n            }\n\n        }\n    }\n});\n\nconst sendCartData = (cart) => {\n return async(dispatch)=>{\n    dipatchFn(\n        uiSliceActions.showNotification({\n          status: \"pending\",\n          title: \"Sending...\",\n          message: \"Sending cart data!\",\n        })\n      );\n      const response = await fetch(\n        \"https://react-http-55fae-default-rtdb.firebaseio.com/cart.json\",\n        {\n          method: \"PUT\",\n          body: JSON.stringify(cart),\n        }\n      );\n      if (!response.ok) {\n        throw new Error(\"Error sending data!\");\n      }\n\n      // const data = await response.json();\n      dipatchFn(\n        uiSliceActions.showNotification({\n          status: \"success\",\n          title: \"Successful\",\n          message: \"Succesfully Sent Data!\",\n        })\n      );\n\n };\n};\n\nexport const cartActions = cartSlice.actions;\nexport default cartSlice.reducer;"]},"metadata":{},"sourceType":"module"}